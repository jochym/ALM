#
#  Si_parse_Eigen.py
#
#  This is an example to run ALM in the fitting mode with SimplicialLDLT.
#

from alm import ALM
import numpy as np

lavec = [[20.406, 0, 0],
         [0, 20.406, 0],
         [0, 0, 20.406]]
xcoord = [[0.0000000000000000, 0.0000000000000000, 0.0000000000000000],
          [0.0000000000000000, 0.0000000000000000, 0.5000000000000000],
          [0.0000000000000000, 0.2500000000000000, 0.2500000000000000],
          [0.0000000000000000, 0.2500000000000000, 0.7500000000000000],
          [0.0000000000000000, 0.5000000000000000, 0.0000000000000000],
          [0.0000000000000000, 0.5000000000000000, 0.5000000000000000],
          [0.0000000000000000, 0.7500000000000000, 0.2500000000000000],
          [0.0000000000000000, 0.7500000000000000, 0.7500000000000000],
          [0.1250000000000000, 0.1250000000000000, 0.1250000000000000],
          [0.1250000000000000, 0.1250000000000000, 0.6250000000000000],
          [0.1250000000000000, 0.3750000000000000, 0.3750000000000000],
          [0.1250000000000000, 0.3750000000000000, 0.8750000000000000],
          [0.1250000000000000, 0.6250000000000000, 0.1250000000000000],
          [0.1250000000000000, 0.6250000000000000, 0.6250000000000000],
          [0.1250000000000000, 0.8750000000000000, 0.3750000000000000],
          [0.1250000000000000, 0.8750000000000000, 0.8750000000000000],
          [0.2500000000000000, 0.0000000000000000, 0.2500000000000000],
          [0.2500000000000000, 0.0000000000000000, 0.7500000000000000],
          [0.2500000000000000, 0.2500000000000000, 0.0000000000000000],
          [0.2500000000000000, 0.2500000000000000, 0.5000000000000000],
          [0.2500000000000000, 0.5000000000000000, 0.2500000000000000],
          [0.2500000000000000, 0.5000000000000000, 0.7500000000000000],
          [0.2500000000000000, 0.7500000000000000, 0.0000000000000000],
          [0.2500000000000000, 0.7500000000000000, 0.5000000000000000],
          [0.3750000000000000, 0.1250000000000000, 0.3750000000000000],
          [0.3750000000000000, 0.1250000000000000, 0.8750000000000000],
          [0.3750000000000000, 0.3750000000000000, 0.1250000000000000],
          [0.3750000000000000, 0.3750000000000000, 0.6250000000000000],
          [0.3750000000000000, 0.6250000000000000, 0.3750000000000000],
          [0.3750000000000000, 0.6250000000000000, 0.8750000000000000],
          [0.3750000000000000, 0.8750000000000000, 0.1250000000000000],
          [0.3750000000000000, 0.8750000000000000, 0.6250000000000000],
          [0.5000000000000000, 0.0000000000000000, 0.0000000000000000],
          [0.5000000000000000, 0.0000000000000000, 0.5000000000000000],
          [0.5000000000000000, 0.2500000000000000, 0.2500000000000000],
          [0.5000000000000000, 0.2500000000000000, 0.7500000000000000],
          [0.5000000000000000, 0.5000000000000000, 0.0000000000000000],
          [0.5000000000000000, 0.5000000000000000, 0.5000000000000000],
          [0.5000000000000000, 0.7500000000000000, 0.2500000000000000],
          [0.5000000000000000, 0.7500000000000000, 0.7500000000000000],
          [0.6250000000000000, 0.1250000000000000, 0.1250000000000000],
          [0.6250000000000000, 0.1250000000000000, 0.6250000000000000],
          [0.6250000000000000, 0.3750000000000000, 0.3750000000000000],
          [0.6250000000000000, 0.3750000000000000, 0.8750000000000000],
          [0.6250000000000000, 0.6250000000000000, 0.1250000000000000],
          [0.6250000000000000, 0.6250000000000000, 0.6250000000000000],
          [0.6250000000000000, 0.8750000000000000, 0.3750000000000000],
          [0.6250000000000000, 0.8750000000000000, 0.8750000000000000],
          [0.7500000000000000, 0.0000000000000000, 0.2500000000000000],
          [0.7500000000000000, 0.0000000000000000, 0.7500000000000000],
          [0.7500000000000000, 0.2500000000000000, 0.0000000000000000],
          [0.7500000000000000, 0.2500000000000000, 0.5000000000000000],
          [0.7500000000000000, 0.5000000000000000, 0.2500000000000000],
          [0.7500000000000000, 0.5000000000000000, 0.7500000000000000],
          [0.7500000000000000, 0.7500000000000000, 0.0000000000000000],
          [0.7500000000000000, 0.7500000000000000, 0.5000000000000000],
          [0.8750000000000000, 0.1250000000000000, 0.3750000000000000],
          [0.8750000000000000, 0.1250000000000000, 0.8750000000000000],
          [0.8750000000000000, 0.3750000000000000, 0.1250000000000000],
          [0.8750000000000000, 0.3750000000000000, 0.6250000000000000],
          [0.8750000000000000, 0.6250000000000000, 0.3750000000000000],
          [0.8750000000000000, 0.6250000000000000, 0.8750000000000000],
          [0.8750000000000000, 0.8750000000000000, 0.1250000000000000],
          [0.8750000000000000, 0.8750000000000000, 0.6250000000000000]]

kd = [14] * 64

force = np.loadtxt("force.dat").reshape((-1, 64, 3))[:22]
disp = np.loadtxt("disp.dat").reshape((-1, 64, 3))[:22]

with ALM(lavec, xcoord, kd) as alm:
    # Set displacement and force data
    alm.set_displacement_and_force(disp, force)

    # Define the taylor expansion model and find force constants
    alm.define(2, [-1, 7.3])

    # Set up options for translational invariance
    alm.set_constraint(translation=True)

    # Run fitting by internal function
    alm.optimize()
    fc_values1, elem_indices1 = alm.get_fc(2)

    # Run fitting by interal sparse solver
    alm.optimize(solver='SimplicialLDLT')
    fc_values2, elem_indices2 = alm.get_fc(2)

    c = "xyz"

    diffs = []
    for (fc, fc_sparse, elem) in zip(fc_values1, fc_values2, elem_indices2):
        v1 = elem[0] // 3
        c1 = elem[0] % 3
        v2 = elem[1] // 3
        c2 = elem[1] % 3
        diffs.append(fc - fc_sparse)
        print("%15.7f %15.7f %15.6e %d%s %d%s" %
              ((fc, fc_sparse, fc - fc_sparse, v1 + 1, c[c1], v2 + 1, c[c2])))

    print("")
    print("* Largest difference between dense and sparse solvers: %e"
          % np.max(np.abs(diffs)))
